@page "/"
@using HiLo.DTOs
@using Microsoft.AspNetCore.SignalR.Client;
@inject IConfiguration Configuration
<PageTitle>HiLo</PageTitle>

@if (ShowingNewGameDialog)
{
    <NewGame Model="@NewGameModel" OnOkay="StartNewGame" OnJoin="JoinGame" OnNewGameKey="RequestNewGameKey" OnRemoteStart="RemoteStartNewGame" OnRemoteRoundsChanged="(resp) => UpdateRemoteRounds((int) resp)" />
}
else
{
    <GameStatus Model="@GameStatusModel" />
    <div id="cards" @ref="cards">
        @for (int i = 1; i <= 12; i++)
        {
            <CardImage Id="i" Card="@drawnCards[i -1]" />
        }
    </div>
    <div id="buttons">
        <button type="button" @onclick="OpenNewGameDialog">New Game</button>
        <button type="button" @onclick="Higher">Higher</button>
        <button type="button" @onclick="Lower">Lower</button>
        <button type="button" @onclick="Swap" disabled="@CannotSwapCard">Swap</button>
        <a class="button" href="help">Help &amp; Rules</a>
    </div>
}
@if (ShowingMessageDialog)
{
    <MessageDialog Message="@MessageText" Title="@MessageTitle" OnOkay="CloseMessageDialog" />
}
@code {
    private bool ShowingNewGameDialog;
    private NewGameModel NewGameModel = new NewGameModel{Player1Name = "Player 1", Player2Name = "Player 2", NumberOfRounds = 1};
    private bool ShowingMessageDialog;
    private string MessageTitle = string.Empty;
    private string MessageText = string.Empty;
    private Game? localGame;
    private Card[] drawnCards = new Card[12];
    private bool CannotSwapCard = true;
    private Player? RemoteWinningPlayer = null;
    private GameStatusModel GameStatusModel = new GameStatusModel { CurrentPlayer = new Player("none"), CurrentRound = 0, TotalRounds = 0, Players = new Player[] { new Player("Player 1", 0), new Player("Player 2", 0) } };
    private ElementReference cards;
    private MessageType messageType;
    private enum MessageType
    {
        General,
        PlayerSwap,
        GameWon
    }
    private HubConnection connection;
    private bool remoteGame = false;

    protected override async Task OnInitializedAsync()
    {
        OpenNewGameDialog();
        await InitSignalRClient();
    }

    private async Task JoinGame()
    {
        await connection.SendAsync("JoinGame", new JoinGameRequest(NewGameModel.Player1Name, NewGameModel.GameKey));

    }

    private async Task RequestNewGameKey()
    {
        await connection.SendAsync("NewGame", new NewGameRequest(NewGameModel.Player1Name));

    }

    public async Task RemoteStartNewGame()
    {
        RemoteWinningPlayer = null;
        await connection.SendAsync("StartGame");
    }

    private async Task UpdateRemoteRounds(int numberOfRounds)
    {
        await connection.SendAsync("UpdateRounds", new UpdateRoundsRequest(numberOfRounds));
    }

    private void StartNewGame()
    {
        remoteGame = false;
        ResetCardImages();
        Player[] players = { new Player(NewGameModel.Player1Name), new Player(NewGameModel.Player2Name) };
        localGame = new Game(players[0], players[1], NewGameModel.NumberOfRounds);
        GameState? gs = localGame?.StartRound();
        GameStatusModel.CurrentRound = localGame?.RoundCount ?? 1;
        GameStatusModel.Players = players;
        GameStatusModel.TotalRounds = NewGameModel.NumberOfRounds;
        CloseNewGameDialog();
        HandleGameState(gs);

    }

    private void OpenNewGameDialog()
    {
        ShowingNewGameDialog = true;
    }

    private void CloseNewGameDialog()
    {
        ShowingNewGameDialog = false;
    }

    private void OpenMessageDialog(string messageText, string messageTitle = "Message", MessageType messageType = MessageType.General)
    {
        MessageText = messageText;
        MessageTitle = messageTitle;
        this.messageType = messageType;
        ShowingMessageDialog = true;
    }

    private async Task CloseMessageDialog()
    {
        ShowingMessageDialog = false;
        if (messageType == MessageType.GameWon)
        {
            ResetCardImages();
            if (remoteGame && RemoteWinningPlayer is null)
            {
                await SendSignalRStartRound();
            } 
            else
            {
                if (localGame != null && !localGame.GameOver)
                {
                    HandleGameState(localGame?.StartRound());
                    GameStatusModel.CurrentRound = localGame?.RoundCount ?? 1;
                }
                else
                {
                    string name = remoteGame ? RemoteWinningPlayer?.Name! : localGame?.WinningPlayer?.Name!;
                    int roundsWon = remoteGame ? RemoteWinningPlayer?.RoundsWon ?? 0 : localGame?.WinningPlayer?.RoundsWon ?? 0;
                    OpenMessageDialog(WinMessage(name, roundsWon), "Game over");
                }
            }
        }
    }

    private string WinMessage(string name, int roundsWon) => $"Congratulations! {name} has won the game with a score of {roundsWon}";

    private void HandleGameState(GameState? gs)
    {
        if (gs is not null)
        {
            if (gs.NewCard is not null)
            {
                drawnCards[gs.RoundPosition - 1] = gs.NewCard;
            }
            CannotSwapCard = !gs.CanSwapCard;
            if (gs.CurrentPlayer is not null)
            {
                GameStatusModel.CurrentPlayer = gs.CurrentPlayer;
                if (gs.HasPlayerSwapped)
                {
                    OpenMessageDialog($"Swap Player! It is now {gs.CurrentPlayer.Name}'s turn.", "Swap Player", MessageType.PlayerSwap);
                }
                if (gs.IsGameWon)
                {
                    OpenMessageDialog($"Congratulations! {gs.CurrentPlayer.Name} wins this round", "Round over", MessageType.GameWon);
                }
            }
        }
    }

    private void ResetCardImages()
    {
        Array.Fill(drawnCards, null);
    }

    private async Task Higher()
    {
        if (remoteGame)
        {
            await SendSignalRGameProgress(Core.Action.Higher);
        } else {
            HandleGameState(localGame?.Higher());
        }
    }

    private async Task Lower()
    {
        if (remoteGame)
        {
            await SendSignalRGameProgress(Core.Action.Lower);
        } else {
            HandleGameState(localGame?.Lower());
        }
    }

    private async Task Swap()
    {
        if (remoteGame)
        {
            await SendSignalRGameProgress(Core.Action.Swap);

        } else {
            HandleGameState(localGame?.Swap());
        }
    }

    private async Task SendSignalRGameProgress(Core.Action action){
        await connection.InvokeAsync("ProgressGame", new ProgressGameRequest(action));
    }

    private async Task SendSignalRStartRound()
    {
        await connection.InvokeAsync("StartRound");
    }

    private async Task InitSignalRClient()
    {
        connection = new HubConnectionBuilder()
        .WithUrl(Configuration["GameHubUrl"])
        .Build();


        connection.On<StartGameResponse>("GameStarted", async (response) =>
        {
            remoteGame = true;
            CloseNewGameDialog();
            GameStatusModel.GameKey = response.gameKey;
            GameStatusModel.TotalRounds = response.numberOfRounds;

            await InvokeAsync(StateHasChanged);
        });

        connection.On<UpdateRoundsResponse>("RoundsUpdated", async (response) =>
        {
            NewGameModel.RemoteNumberOfRounds = response.numberOfRounds;
            await InvokeAsync(StateHasChanged);

        });

        connection.On<StartRoundResponse>("RoundStarted", async (response) =>
        {
            ShowingMessageDialog = false;
            ResetCardImages();
            GameStatusModel.CurrentRound = response.currentRound;
            GameStatusModel.Players = response.players;
            await InvokeAsync(StateHasChanged);

        });

        connection.On<GameDetailsResponse>("GameDetails", async (response) =>
        {
            NewGameModel.GameKey = response.gameKey;
            NewGameModel.OnlinePlayers = response.players;
            NewGameModel.RemoteNumberOfRounds = response.numberOfRounds;
            await InvokeAsync(StateHasChanged);

        });

        connection.On<ProgressGameResponse>("GameProgressed", async (response) =>
        {

            HandleGameState(response.gameState);
            await InvokeAsync(StateHasChanged);
            if (response.gameState.IsGameWon)
            {
                OpenMessageDialog($"Congratulations! {response.gameState.CurrentPlayer.Name} wins this round", "Round over", MessageType.GameWon);

            }
        });
        connection.On<GameWonResponse>("GameWon", async (response) =>
        {
            RemoteWinningPlayer = response.winningPlayer;
        });
        if (bool.Parse(Configuration["EnableRemotePlay"] ?? "false"))
        {
            try
            {
                await connection.StartAsync();
                NewGameModel.RemotePlayAvailable = true;
            }
            catch (Exception ex)
            {
                NewGameModel.RemotePlayAvailable = false;
            }
        }
    }
}